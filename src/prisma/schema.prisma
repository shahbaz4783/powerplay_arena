generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum BetType {
  SAFE_BET
  CLASSIC_FLIP
  TRIPLE_SHOT
  JACKPOT
}

enum TransactionType {
  GAME
  REWARD
  PRIZE
  EXCHANGE
  PURCHASE
  WITHDRAWAL
  REFUND
  OTHERS
}

enum MatchFormat {
  BLITZ
  POWERPLAY
  CLASSIC
}

enum GameOutcome {
  WON
  LOST
  TIE
  ONGOING
}

enum VoucherRewardStatus {
  PENDING
  CREDITED
  EXPIRED
  CLAIMED
}

enum VoucherPurchasedStatus {
  CREDITED
  REFUNDED
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

// User-related models
model User {
  telegramId String   @id @unique
  firstName  String
  lastName   String?
  username   String?  @unique
  isPremium  Boolean  @default(false)
  inviteCode String   @unique
  avatarUrl  String
  createdAt  DateTime @default(now())

  inventory UserInventory?
  progress  UserProgression?

  voucherPurchases VoucherPurchase[]
  transactions     Transaction[]
  cricketMatch     CricketMatchRecord[]
  cricketStats     CricketMatchStats[]
  betStats         BetStats[]
  referrals        ReferralRecord[]     @relation("Referrer")
  referredBy       ReferralRecord[]     @relation("ReferredUser")

  @@index([telegramId])
  @@map("users")
}

model UserProgression {
  id             String    @id @default(cuid())
  telegramId     String    @unique
  level          Int       @default(1)
  totalXP        Int       @default(0)
  levelName      String
  xpForNextLevel Int
  streakLength   Int       @default(0)
  weeklyStreak   Int       @default(0)
  lastClaimedAt  DateTime?

  user User @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)

  @@index(telegramId)
  @@map("user_progression")
}

model UserInventory {
  id          String @id @default(cuid())
  telegramId  String @unique
  powerCoin   Int    @default(0)
  powerPass   Int    @default(0)
  starVoucher Int    @default(0)

  avatars  Avatar[]
  powerUps PowerUp[]
  badge    Badge[]
  user     User      @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)

  @@map("user_inventory")
}

model Avatar {
  id          String @id @default(cuid())
  mintNumber  Int    @default(autoincrement())
  avatarId    String
  telegramId  String
  title       String
  description String
  photoUrl    String
  xpBoost     Float

  inventory UserInventory @relation(fields: [telegramId], references: [id], onDelete: Cascade)

  @@index([telegramId])
  @@map("avatars")
}

model PowerUp {
  id           String @id @default(cuid())
  mintNumber   Int    @default(autoincrement())
  telegramId   String
  powerUpId    String

  title        String
  description  String
  photoUrl     String
  rarity Rarity @default(COMMON)
  currentBoost Float
  currentBenefit String

  inventory UserInventory @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([telegramId])
  @@map("power_ups")
}

model Badge {
  id          String   @id @default(cuid())
  badgeId     String
  telegramId  String
  title       String
  description String
  photoUrl    String
  createdAt   DateTime @default(now())

  inventory UserInventory @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)

  @@index([telegramId])
  @@map("badges")
}

// Game-related models
model CricketMatchRecord {
  // match info
  matchId     String      @id @default(uuid())
  matchNumber Int         @default(autoincrement())
  telegramId  String
  format      MatchFormat

  // batting info
  runsScored Int @default(0)
  ballsFaced Int @default(0)
  sixes      Int @default(0)
  fours      Int @default(0)

  // bowling info
  wicketsTaken Int @default(0)
  runsConceded Int @default(0)
  ballsBowled  Int @default(0)
  hattrick     Int @default(0)
  maidenOver   Int @default(0)

  outcome   GameOutcome @default(ONGOING)
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)
}

model CricketMatchStats {
  id         String      @id @default(cuid())
  telegramId String
  format     MatchFormat

  matchesPlayed Int @default(0)
  matchesWon    Int @default(0)
  matchesLost   Int @default(0)
  matchesTie    Int @default(0)

  runsScored        Int @default(0)
  highestRunsScored Int @default(0)
  ballsFaced        Int @default(0)
  sixes             Int @default(0)
  fours             Int @default(0)

  wicketsTaken       Int  @default(0)
  runsConceded       Int  @default(0)
  ballsBowled        Int  @default(0)
  lowestRunsConceded Int?
  bestBowlingWickets Int?
  bestBowlingRuns    Int?

  user User @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)

  @@unique([telegramId, format])
  @@index([telegramId])
  @@map("stats")
}

model BetStats {
  id           String  @id @default(cuid())
  telegramId   String
  betType      BetType
  betsPlaced   Int     @default(0)
  betsWon      Int     @default(0)
  totalWagered Int     @default(0)
  totalEarning Int     @default(0)
  totalLoss    Int     @default(0)

  user User @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)

  @@unique([telegramId, betType])
  @@index([telegramId])
  @@map("bet_stats")
}

// Transaction-related models
model Transaction {
  id            String          @id @default(cuid())
  telegramId    String
  coinAmount    Int             @default(0)
  passAmount    Int             @default(0)
  voucherAmount Int             @default(0)
  type          TransactionType
  description   String?
  metadata      Json?
  createdAt     DateTime        @default(now())
  user          User            @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)

  @@index(telegramId)
  @@index(type)
  @@map("transactions")
}

model WaitlistUser {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("waitlist_users")
}

model ReferralRecord {
  id                  String   @id @default(uuid())
  referrerId          String
  referredId          String
  createdAt           DateTime @default(now())
  expiresAt           DateTime
  totalEarnedCoins    Int      @default(0)
  totalEarnedPasses   Int      @default(0)
  totalEarnedVouchers Int      @default(0)
  maxVouchers         Int      @default(100)

  referrer       User            @relation("Referrer", fields: [referrerId], references: [telegramId], onDelete: Cascade)
  referredUser   User            @relation("ReferredUser", fields: [referredId], references: [telegramId], onDelete: Cascade)
  voucherRewards VoucherReward[]

  @@index([referrerId])
  @@index([referredId])
  @@map("referral_records")
}

model VoucherPurchase {
  id                    String                 @id @default(uuid())
  telegramId            String
  voucherAmount         Int
  starAmount            Int
  telegramPaymentId     String                 @unique
  providerPaymentId     String
  VoucherPurchaseStatus VoucherPurchasedStatus
  purchasedAt           DateTime               @default(now())

  user           User            @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)
  voucherRewards VoucherReward[]

  @@index([telegramId])
  @@map("voucher_purchases")
}

model VoucherReward {
  id                String              @id @default(uuid())
  referralRecordId  String
  voucherPurchaseId String
  referrerReward    Int
  referredReward    Int
  status            VoucherRewardStatus
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  claimBy           DateTime

  referralRecord  ReferralRecord  @relation(fields: [referralRecordId], references: [id], onDelete: Cascade)
  voucherPurchase VoucherPurchase @relation(fields: [voucherPurchaseId], references: [id], onDelete: Cascade)

  @@index([referralRecordId])
  @@index([voucherPurchaseId])
  @@map("voucher_rewards")
}
