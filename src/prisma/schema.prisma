generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WaitlistUser {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model User {
  telegramId     BigInt    @unique
  firstName      String    @unique
  lastName       String?
  username       String?   @unique
  languageCode   String
  isPremium      Boolean?
  lastClaimed    DateTime?
  streak         Int       @default(0)
  wallet         Wallet?
  transaction    Transaction[]
  stats          Stats[]
  award          Award[]
  avatar         Avatar[]
  xp             XP?
}

model XP {
  id            String   @id @default(cuid())
  userId        BigInt   @unique
  user          User     @relation(fields: [userId], references: [telegramId])
  totalXP       Int      @default(0)
  level         Int      @default(1)
  levelName     String
  xpForNextLevel  Int      @default(2000)
  @@index([userId])
}

model Avatar {
  id  String   @id @default(cuid())
  avatarId      String   
  userId        BigInt 
  user          User     @relation(fields: [userId], references: [telegramId])
  title         String  
  description   String
  href          String

  @@index([userId])
}

model Award {
  id            String   @id @default(cuid())
  awardId       String   
  userId        BigInt 
  user          User     @relation(fields: [userId], references: [telegramId])
  title         String  
  description   String
  createdAt     DateTime @default(now())
  
  @@index([userId])
}

model Stats {
  id            String      @id @default(cuid())
  userId        BigInt
  format        MatchFormat
  user          User        @relation(fields: [userId], references: [telegramId])

  matchesPlayed Int         @default(0)
  matchesWon    Int         @default(0)
  matchesLost   Int         @default(0)
  matchesTie    Int         @default(0)

  runsScored    Int         @default(0)
  ballsFaced    Int         @default(0)
  sixes         Int         @default(0)
  fours         Int         @default(0)

  wicketsTaken  Int         @default(0)
  runsConceded  Int         @default(0)
  ballsBowled   Int         @default(0)

  @@unique([userId, format])
  @@index([userId])
}

enum MatchFormat {
  BLITZ
  POWERPLAY
  CLASSIC
}

model Wallet {
  id      String @id @default(cuid())
  balance Int
  user    User   @relation(fields: [userId], references: [telegramId])
  userId  BigInt @unique
}

model Transaction {
  id          String            @id @default(cuid())
  userId      BigInt
  user        User              @relation(fields: [userId], references: [telegramId])
  amount      Int
  type        TransactionType
  description String?
  matchId     String?
  createdAt   DateTime          @default(now())
  status      TransactionStatus @default(COMPLETED)

  @@index([userId])
  @@index([type])
}

enum TransactionType {
  MATCH_FEE
  MATCH_WINNINGS
  REWARD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
