generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WaitlistUser {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model User {
  telegramId     BigInt    @id @unique
  firstName      String    @unique
  lastName       String?
  username       String?   @unique
  languageCode   String
  isPremium      Boolean?
  profile        Profile?
  transaction    Transaction[]
  stats          Stats[]
  award          Award[]
  avatar         Avatar[]
}

model Profile {
  id              String   @id @default(cuid())
  telegramId      BigInt   @unique
  user            User     @relation(fields: [telegramId], references: [telegramId])
  balance         Int      @default(0)
  totalXP         Int      @default(0)
  level           Int      @default(1)
  levelName       String
  xpForNextLevel  Int
  streakLength    Int      @default(0)
  weeklyStreak    Int      @default(0)
  powerPass       Int
  avatarUrl       String
  lastClaimedAt   DateTime?

  @@index([telegramId])
}

model Avatar {
  id            String   @id @default(cuid())
  avatarId      String   
  telegramId    BigInt 
  user          User     @relation(fields: [telegramId], references: [telegramId])
  title         String  
  description   String
  href          String

  @@index([telegramId])
}

model Award {
  id            String   @id @default(cuid())
  awardId       String   
  telegramId    BigInt 
  user          User     @relation(fields: [telegramId], references: [telegramId])
  title         String  
  description   String
  createdAt     DateTime @default(now())
  
  @@index([telegramId])
}

model Stats {
  id               String      @id @default(cuid())
  telegramId       BigInt
  format           MatchFormat
  user             User        @relation(fields: [telegramId], references: [telegramId])

  matchesPlayed    Int         @default(0)
  matchesWon       Int         @default(0)
  matchesLost      Int         @default(0)
  matchesTie       Int         @default(0)

  runsScored        Int         @default(0)
  highestRunsScored Int         @default(0)
  ballsFaced        Int         @default(0)
  sixes             Int         @default(0)
  fours             Int         @default(0)
  
  wicketsTaken          Int         @default(0)
  runsConceded          Int         @default(0)
  lowestRunsConceded    Int         @default(0)
  highestWicketsTaken   Int         @default(0)
  ballsBowled           Int         @default(0)
  hattrik               Int         @default(0)
  maidenOver            Int         @default(0)

  @@unique([telegramId, format])
  @@index([telegramId])
}

model Transaction {
  id          String            @id @default(cuid())
  telegramId  BigInt
  user        User              @relation(fields: [telegramId], references: [telegramId])
  amount      Int
  balanceEffect BalanceEffect
  type        TransactionType
  description String?
  matchId     String?
  createdAt   DateTime          @default(now())
  status      TransactionStatus @default(COMPLETED)

  @@index([telegramId])
  @@index([type])
}

enum BalanceEffect {
  INCREMENT
  DECREMENT
  NO_EFFECT
}

enum TransactionType {
  MATCH_FEE
  MATCH_EARNINGS
  REWARD
  BET_PLACED
  BET_WON
  PURCHASE
  OTHERS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum MatchFormat {
  BLITZ
  POWERPLAY
  CLASSIC
}